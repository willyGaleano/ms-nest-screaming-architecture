services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ms-nest-screaming-app
    ports:
      - "3000:3000"
      - "9229:9229"
    environment:
      - NODE_ENV=development      
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_CLIENT_ID=${KAFKA_CLIENT_ID}
      - KAFKA_CONSUMER_GROUP_ID=${KAFKA_CONSUMER_GROUP_ID}
    env_file:
      - .env
    volumes:
      - ./src:/usr/src/app/src
      - ./prisma:/usr/src/app/prisma
      - ./test:/usr/src/app/test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ms_nest_screaming_network
    restart: unless-stopped

  postgres:
    image: postgres:17.4
    container_name: ms-nest-screaming-postgres
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: unless-stopped
    networks:
      - ms_nest_screaming_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${POSTGRES_USER}', '-d', '${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:8.0.2
    container_name: ms-nest-screaming-redis
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - ms_nest_screaming_network
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: ms-nest-screaming-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:      
      - KAFKA_NODE_ID=1
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
      - CLUSTER_ID=${KAFKA_CLUSTER_ID}      
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_LOG_RETENTION_HOURS=168
      - KAFKA_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS=300000
    restart: unless-stopped
    networks:
      - ms_nest_screaming_network
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ms-nest-screaming-kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_METRICS_PORT=9997
      - DYNAMIC_CONFIG_ENABLED=true
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ms_nest_screaming_network

networks:
  ms_nest_screaming_network:
    driver: bridge
    name: ms_nest_screaming_network

volumes:
  postgres_data:
      driver: local
      name: ms_nest_screaming_postgres_data
  redis_data:
    driver: local
    name: ms_nest_screaming_redis_data  
  kafka_data:
    driver: local
    name: ms_nest_screaming_kafka_data
